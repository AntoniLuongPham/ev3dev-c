
/*  mainpage.dox was generated by yup.py (yupp) 0.7b6
    out of mainpage.yu-dox at 2014-11-10 14:13
 *//**
 *  \file  mainpage.dox (mainpage.yu-dox)
 *  \brief  Main page of docs.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

/** \mainpage LEGO Mindstorms EV3 Debian C library + Python, Ruby and Perl wrappers

<CENTER>
\verbatim
 
 ____ __     ____   ___    ____ __         (((((()
| |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /   
|_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \   
                                           ((())))
 
\endverbatim
</CENTER>

<H2>The <A HREF="https://github.com/in4lio/ev3dev-c/">library</A> hierarchic structure</H2>

<H3>I LEVEL</H3>

This level contains functions for a \ref ev3 "local" and \ref ev3_link "remote"
access to the file system of the EV3 brick. The following code will write
the value in the file (on the brick) or will send these data in an UDP message
to the brick (on the remote computer).
\code {.c}
ev3_init();

ev3_write( "/sys/class/leds/ev3:red:right/trigger", "heartbeat" );

ev3_uninit();
\endcode
For more information about a remote access to the EV3 brick go to
<A HREF="https://github.com/in4lio/ev3dev-c/tree/master/source/ev3/ev3_link">"source/ev3/ev3_link/README"</A>.

<H3>II LEVEL</H3>

Basic \ref ev3_led "functions" to read and write attributes of LEDs, see
<A HREF="https://github.com/ev3dev/ev3dev/wiki/Using-the-LEDs">"Using LEDs"</A>.
\code {.c}
int ok;
uint8_t val;

ev3_init();

ok = get_led_brightness( EV3_GREEN_LEFT, &val );
if ( ok ) {
	printf( "EV3_GREEN_LEFT is %s\n", ( val ) ? "ON" : "OFF" );
}
ev3_uninit();
\endcode
Basic \ref ev3_port "functions" to read and write attributes of EV3 Ports, see
<A HREF="http://www.ev3dev.org/docs/drivers/ev3-output-port/">"EV3 Output Port Driver"</A>
and <A HREF="http://www.ev3dev.org/docs/drivers/ev3-input-port/">"EV3 Input Port Driver"</A>.
\code {.c}
char s[ 256 ];
uint8_t i;

ev3_init();

if ( get_output_state( OUTPUT_A, s, sizeof( s ))) {
	printf( "OUTPUT_A state = %s\n", s );
}
ev3_uninit();
\endcode
Basic \ref ev3_sensor "functions" to read and write attributes of Mindstorms Sensors, see
<A HREF="http://www.ev3dev.org/docs/drivers/msensor-class/">"MINDSTORMS Sensor Class"</A>.
\code {.c}
uint8_t sn;
int val;

ev3_init();
ev3_sensor_init();

if ( ev3_search_sensor( LEGO_EV3_TOUCH, &sn, 0 )) {
	if ( get_sensor_value( 0, sn, &val )) {
		printf( "TOUCH sensor value = %d\n", val );
	}
}
ev3_uninit();
\endcode
Basic \ref ev3_tacho "functions" to read and write attributes of Tacho Motors, see
<A HREF="http://www.ev3dev.org/docs/drivers/tacho-motor-class/">"Tacho Motor Class"</A>.
\code {.c}
uint8_t sn;

ev3_init();
ev3_tacho_init();

if ( ev3_search_tacho( TACHO, &sn, 0 )) {
	set_tacho_regulation_mode( sn, "off" );
	set_tacho_run_mode( sn, "time" );
	set_tacho_stop_mode( sn, "brake" );
	set_tacho_duty_cycle_sp( sn, 100 );
	set_tacho_time_sp( sn, 5000 );
	set_tacho_ramp_up_sp( sn, 2000 );
	set_tacho_ramp_down_sp( sn, 2000 );
	set_tacho_run( sn, true );
}
ev3_uninit();
\endcode
Basic \ref ev3_dc "functions" to read and write attributes of DC Motors, see
<A HREF="http://www.ev3dev.org/docs/drivers/dc-motor-class/">"DC Motor Class"</A>.
\code {.c}
uint8_t sn;

ev3_init();
set_output_mode_inx( OUTPUT_D, OUTPUT_RCX_MOTOR );
ev3_dc_init();

if ( ev3_search_dc( RCX_MOTOR, &sn, 0 )) {
	set_dc_duty_cycle( sn, 100 );
	set_dc_command( sn, "run" );
	Sleep( 5000 );
	set_dc_command( sn, "brake" );
}
ev3_uninit();
\endcode

<H3>III	LEVEL</H3>

Task-focused user-friendly functions. Only \ref ev3_light "light" module in
this category at the moment.
\code {.c}
	ev3_init();

	set_light_blink( LIT_LEFT, LIT_AMBER, 1000, 500 );

	ev3_uninit();
\endcode

<BR><HR>
<H2>Python, Ruby, Perl and other languages</H2>

<A HREF="https://pypi.python.org/pypi/ev3dev-c/">Libraries</A> on Python and Ruby
have been generated using <A HREF="http://www.swig.org/">SWIG</A>.
The SWIG interface file called "ev3.i", its source is
<A HREF="https://github.com/in4lio/ev3dev-c/blob/master/ev3.yu-i">"ev3.yu-i"</A>.
<P>Features of Python library:
1. Functions return a value as the second element of the result tuple;
2. Access to descriptors of detected devices only through \ref ev3_sensor_desc, \ref ev3_tacho_desc and ev3_<class>_desc_<field> functions;
3. Access to other global variables through "ev3" namespace.</P>
\code {.py}
color = [ '?', 'BLACK', 'BLUE', 'GREEN', 'YELLOW', 'RED', 'WHITE', 'BROWN' ]

if not EV3_BRICK:
    ev3.brick_addr = '192.168.0.244'
ev3_init()
ev3_sensor_init()

ok, sn = ev3_search_sensor( EV3_UART_29 )
if ok:
    set_sensor_mode( sn, 'COL-COLOR' )

    ok, val = get_sensor_value( 0, sn )
    if ok:
        print 'COLOR =', color[ val ]

ev3_uninit()
\endcode
<P>Features of Ruby library:
1. Functions return a value as the second element of the result tuple, the first element has a boolean type;
2. Access to descriptors of detected devices only through \ref ev3_sensor_desc, \ref ev3_tacho_desc and ev3_<class>_desc_<field> functions.</P>
\code {.py}
include Ev3
ev3_init()
ev3_sensor_init()

ok, sn = ev3_search_sensor( LEGO_EV3_TOUCH )
if ok
  while get_sensor_value( 0, sn )[ 1 ] == 0 do end
end

ev3_uninit()
\endcode
<P>Features of Perl library:
1. Functions return a value as the second element of the result tuple;
2. Access to descriptors of detected devices only through ev3_<class>_desc_<field> functions.</P>
\code {.c}
use ev3;

ev3::ev3_init();
ev3::ev3_tacho_init();

my ( $ok, $sn ) = ev3::ev3_search_tacho( $ev3::MINITACHO );
if ( $ok ) {
    ev3::set_tacho_regulation_mode( $sn, "off" );
    ev3::set_tacho_duty_cycle_sp( $sn, 50 );
    ev3::set_tacho_run( $sn, 1 );
    sleep( 2 );
    ev3::set_tacho_run( $sn, 0 );
}
ev3::ev3_uninit();
\endcode
Similarly, you can use SWIG to wrap the library in a number of other languages.

<BR><HR>
<H2>TODO</H2>
EV3 buttons, sound, LCD, Bluetooth, files transfer, 3rd level modules etc...
 */

/** \page eg_c Examples in C
\include light.c
\include tacho.c
\include sensor.c
\include dc.c
\include led.c
\include io.c
\include poweroff.c
 */

/** \page eg_python Examples in Python
\include light.py
\include tacho.py
\include sensor.py
\include led.py
\include io.py
\include poweroff.py
 */

/** \page eg_ruby Examples in Ruby
\include light.rb
\include tacho.rb
\include sensor.rb
\include led.rb
\include io.rb
\include poweroff.rb
 */

/** \page eg_perl Examples in Perl
\include light.pl
\include tacho.pl
\include sensor.pl
\include led.pl
\include io.pl
\include poweroff.pl
 */
