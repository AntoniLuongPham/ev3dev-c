
/*  mainpage.dox was generated by yup.py (yupp) 0.9b3
    out of mainpage.yu-dox
 *//**
 *  \file  mainpage.dox (mainpage.yu-dox)
 *  \brief  Main page of docs.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

/** \mainpage LEGO Mindstorms EV3 Debian C library + Python, Ruby and Perl wrappers

<center>
\verbatim
 
 ____ __     ____   ___    ____ __         (((((()
| |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /   
|_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \   
                                           ((())))
 
\endverbatim
</center>

## [ev3dev-c](https://github.com/in4lio/ev3dev-c/) 0.9b1 (for kernel 4.4.15-13-ev3dev-ev3)

## The library hierarchic structure

### Low level

Low level contains functions for \ref ev3 "local" and \ref ev3_link "remote" access to the file system of
the EV3 brick. The following code will write `"heartbeat"` string to the specified file (if running on the brick)
or will send both of the arguments to the brick using UDP message (if running on the remote computer).

\code {.c}
ev3_init();

ev3_write( "/sys/class/leds/ev3:red:right/trigger", "heartbeat" );

ev3_uninit();
\endcode

<p>For more information about remote access to the EV3 brick, please, read
["ev3_link"](https://github.com/in4lio/ev3dev-c/tree/master/source/ev3/ev3_link).

### Mid level

&bull; Basic functions to access the attributes of \ref ev3_led "LEDs", see
["Using LEDs"](https://github.com/ev3dev/ev3dev/wiki/Using-the-LEDs).

\code {.c}
int ok;
uint8_t val;

ev3_init();

ok = get_led_brightness( EV3_GREEN_LEFT, &val );
if ( ok ) {
	printf( "EV3_GREEN_LEFT is %s\n", ( val ) ? "ON" : "OFF" );
}
ev3_uninit();
\endcode

&bull; Basic functions to access the attributes of \ref ev3_port "EV3 Ports and Extended Ports", see
["Input and Output Ports"](http://www.ev3dev.org/docs/ports/).

\code {.c}
uint8_t sn;
char s[ 256 ];

ev3_init();
ev3_port_init();

sn = ev3_search_port( INPUT_2, EXT_PORT__NONE_ );
if ( get_port_mode( sn, s, sizeof( s ))) {
	printf( "INPUT_2 mode = %s\n", s );
}
ev3_uninit();
\endcode

\code {.c}
uint8_t sn, sn_port;
int val;

ev3_init();
ev3_port_init();

sn_port = ev3_search_port( INPUT_1, HT_NXT_SMUX_PORT_2 );
set_port_mode_inx( sn_port, INPUT_NXT_ANALOG );
set_port_set_device( sn_port, ( char *) ev3_sensor_type( LEGO_NXT_TOUCH ));

ev3_sensor_init();

if ( ev3_search_sensor_plugged_in( INPUT_1, HT_NXT_SMUX_PORT_2, &sn, 0 )) {
	if ( get_sensor_value( 0, sn, &val )) {
		printf( "TOUCH sensor value = %d\n", val );
	}
}
set_port_mode_inx( sn_port, INPUT_AUTO );
ev3_uninit();
\endcode

&bull; Basic functions to access the attributes of \ref ev3_sensor "LEGO Sensors", see
["LEGO Sensor Class"](http://www.ev3dev.org/docs/drivers/lego-sensor-class/).

\code {.c}
uint8_t sn;
int val;

ev3_init();

if ( ev3_search_sensor( LEGO_EV3_TOUCH, &sn, 0 )) {
	if ( get_sensor_value( 0, sn, &val )) {
		printf( "TOUCH sensor value = %d\n", val );
	}
}
ev3_uninit();
\endcode

&bull; Basic functions to access the attributes of \ref ev3_tacho "Tacho Motors", see
["Tacho Motor Class"](http://www.ev3dev.org/docs/drivers/tacho-motor-class/).

\code {.c}
uint8_t sn;

ev3_init();
ev3_tacho_init();

if ( ev3_search_tacho( LEGO_EV3_L_MOTOR, &sn, 0 )) {
	set_tacho_stop_action_inx( sn, TACHO_BRAKE );
	set_tacho_speed_sp( sn, 500 );
	set_tacho_time_sp( sn, 5000 );
	set_tacho_ramp_up_sp( sn, 2000 );
	set_tacho_ramp_down_sp( sn, 2000 );
	set_tacho_command( sn, "run_timed" );
}
ev3_uninit();
\endcode

&bull; Basic functions to access the attributes of \ref ev3_dc "DC Motors", see
["DC Motor Class"](http://www.ev3dev.org/docs/drivers/dc-motor-class/).

\code {.c}
uint8_t sn, sn_port;

ev3_init();
ev3_port_init();
sn_port = ev3_search_port( OUTPUT_D, EXT_PORT__NONE_ );
set_port_mode_inx( sn_port, OUTPUT_RCX_MOTOR );
ev3_dc_init();

if ( ev3_search_dc_plugged_in( OUTPUT_D, EXT_PORT__NONE_, &sn, 0 )) {
	set_dc_duty_cycle_sp( sn, 100 );
	set_dc_command_inx( sn, DC_RUN_FOREVER );
	usleep( 5000000 );
	set_dc_command_inx( sn, DC_STOP );
}
set_port_mode_inx( sn_port, OUTPUT_AUTO );
ev3_uninit();
\endcode

&bull; Basic functions to access the attributes of \ref ev3_servo "Servo Motors", see
["Servo Motor Class"](http://www.ev3dev.org/docs/drivers/servo-motor-class/).

\code {.c}
uint8_t sn, sn_port;

ev3_init();
ev3_port_init();

sn_port = ev3_search_port( INPUT_1, EXT_PORT__NONE_ );
set_port_mode_inx( sn_port, INPUT_NXT_ANALOG );
set_port_set_device( sn_port, ( char *) ev3_sensor_type( MS_8CH_SERVO ));

ev3_servo_init();

if ( ev3_search_servo_plugged_in( INPUT_1, EXT_PORT__NONE_, 1, &sn, 0 )) {
	set_servo_command_inx( sn, SERVO_RUN );
	set_servo_position_sp( sn, 100 );
}
set_port_mode_inx( sn_port, INPUT_AUTO );
ev3_uninit();
\endcode

&bull; The \ref ev3_read_keys "function" to access the EV3 brick keys.

\code {.c}
ev3_init();

uint8_t val;

do ev3_read_keys( &val ); while (( val & EV3_KEY_BACK ) == 0 );

ev3_uninit();
\endcode

### High level

Task-focused user-friendly functions. Only \ref ev3_light "light" module in this category at the moment.

\code {.c}
ev3_init();

set_light_blink( LIT_LEFT, LIT_AMBER, 1000, 500 );

ev3_uninit();
\endcode

The \ref remote.c "remote.c" example contains a prototype of high-level library, see \ref ev3_pool.c "ev3_pool.c".
_______________________________________________________________________________

## Python, Ruby, Perl and other languages

The libraries for [Python](https://pypi.python.org/pypi/ev3dev-c/), Ruby and Perl have been generated
using [SWIG](http://www.swig.org/).
The SWIG interface file: [`ev3.i`](https://github.com/in4lio/ev3dev-c/blob/master/ev3.i), its source:
[`ev3.yu-i`](https://github.com/in4lio/ev3dev-c/blob/master/ev3.yu-i).

#### Features of Python library:

1. The functions return the requested value as the second element of the result tuple;
2. Access to the descriptors of detected devices only through `ev3_<class>_desc` or
`ev3_<class>_desc_<field>` functions (e.g. \ref ev3_sensor_desc, \ref ev3_port_desc);
3. Access to the global variables through `ev3` namespace.

\code {.py}
color = [ '?', 'BLACK', 'BLUE', 'GREEN', 'YELLOW', 'RED', 'WHITE', 'BROWN' ]

if not EV3_BRICK:
    ev3.brick_addr = '192.168.0.244'
ev3_init()
ev3_sensor_init()

ok, sn = ev3_search_sensor( LEGO_EV3_UART_29 )
if ok:
    set_sensor_mode( sn, 'COL-COLOR' )

    ok, val = get_sensor_value( 0, sn )
    if ok:
        print 'COLOR =', color[ val ]

ev3_uninit()
\endcode

#### Features of Ruby library:

1. The functions return the requested value as the second element of the result tuple,
the first element has a boolean type;
2. Access to the descriptors of detected devices only through `ev3_<class>_desc` or
`ev3_<class>_desc_<field>` functions (e.g. \ref ev3_dc_desc, \ref ev3_dc_desc_port).

\code {.py}
include Ev3
ev3_init()
ev3_sensor_init()

ok, sn = ev3_search_sensor( LEGO_EV3_TOUCH )
if ok
  while get_sensor_value( 0, sn )[ 1 ] == 0 do end
end

ev3_uninit()
\endcode

#### Features of Perl library:

1. The functions return the requested value as the second element of the result tuple;
2. Access to the descriptors of detected devices only through `ev3_<class>_desc_<field>` functions
(e.g. \ref ev3_tacho_desc_type_inx, \ref ev3_tacho_desc_port).

\code {.c}
use ev3;

ev3::ev3_init();
ev3::ev3_tacho_init();

my ( $ok, $sn ) = ev3::ev3_search_tacho( $ev3::LEGO_EV3_M_MOTOR );
if ( $ok ) {
    ev3::set_tacho_speed_sp( $sn, 500 );
    ev3::set_tacho_command_inx( $sn, $ev3::TACHO_RUN_FOREVER );
    sleep( 2 );
    ev3::set_tacho_command_inx( $sn, $ev3::TACHO_STOP );
}
ev3::ev3_uninit();
\endcode

Similarly you can use SWIG to wrap the library in a number of other languages.

\example drive.c
Example of using coroutines to control the motors.

\example light.c
\example tacho.c
\example sensor.c
\example port.c
\example dc.c
\example servo.c
\example rcx_led.c
\example io.c
\example poweroff.c

\example remote.c
Example of using \ref ev3_pool.c "ev3_pool.c" (high-level library prototype).

\example ev3_pool.h
Prototype of high-level library.

\example ev3_pool.c
Prototype of high-level library.

\example light.py
\example tacho.py
\example sensor.py
\example port.py
\example dc.py
\example led.py
\example io.py
\example poweroff.py

\example light.rb
\example tacho.rb
\example sensor.rb
\example led.rb
\example io.rb
\example poweroff.rb

\example light.pl
\example tacho.pl
\example sensor.pl
\example led.pl
\example io.pl
\example poweroff.pl

*/
