($import "app.yu")
($TITLE,,Main page of docs.)

/** \mainpage ($DESCRIPTION)

<CENTER>
\verbatim
 
 ____ __     ____   ___    ____ __         (((((()
| |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /   
|_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \   
                                           ((())))
 
\endverbatim
</CENTER>

<H2>The <A HREF="https://github.com/in4lio/ev3dev-c/">library</A> hierarchic structure
<BR>($LIBRARY) ($VERSION) (for kernel ($KERNEL))</H2>

<H3>I LEVEL</H3>

<P>This level contains functions for a \ref ev3 "local" and \ref ev3_link "remote"
access to the file system of the EV3 brick. The following code will write
the specified value to the specified file (if running on the brick) or
will send the arguments to the brick using UDP message (on the remote computer).</P>
\code {.c}
ev3_init();

ev3_write( "/sys/class/leds/ev3:red:right/trigger", "heartbeat" );

ev3_uninit();
\endcode
<P>For more information about a remote access to the EV3 brick go to
<A HREF="https://github.com/in4lio/ev3dev-c/tree/master/source/ev3/ev3_link">"source/ev3/ev3_link/README"</A>.</P>

<H3>II LEVEL</H3>

<P>Basic functions to access the attributes of \ref ev3_led "LEDs", see
<A HREF="https://github.com/ev3dev/ev3dev/wiki/Using-the-LEDs">"Using LEDs"</A>.</P>
\code {.c}
int ok;
uint8_t val;

ev3_init();

ok = get_led_brightness( EV3_GREEN_LEFT, &val );
if ( ok ) {
	printf( "EV3_GREEN_LEFT is %s\n", ( val ) ? "ON" : "OFF" );
}
ev3_uninit();
\endcode
<P>Basic functions to access the attributes of \ref ev3_port "EV3 Ports and Extended Ports", see
<A HREF="http://www.ev3dev.org/docs/ports/">"Input and Output Ports"</A>.</P>
\code {.c}
uint8_t sn;
char s[ 256 ];

ev3_init();
ev3_port_init();

sn = ev3_search_port( INPUT_2, EXT_PORT__NONE_ );
if ( get_port_mode( sn, s, sizeof( s ))) {
	printf( "INPUT_2 mode = %s\n", s );
}
ev3_uninit();
\endcode
<P><A HREF="http://www.ev3dev.org/docs/ports/ht-nxt-smux-port/">"HiTechnic NXT Sensor Multiplexer Input Port"</A>
<BR><A HREF="http://www.ev3dev.org/docs/ports/ms-ev3-smux-port/">"mindsensors.com EV3 Sensor Multiplexer Input Port"</A>
<BR><A HREF="http://www.ev3dev.org/docs/ports/wedo-port/">"LEGO WeDo Port"</A>
</P>
\code {.c}
uint8_t sn, sn_port;
int val;

ev3_init();
ev3_port_init();

sn_port = ev3_search_port( INPUT_1, HT_NXT_SMUX_PORT_2 );
set_port_mode_inx( sn_port, INPUT_NXT_ANALOG );
set_port_set_device( sn_port, ( char* ) ev3_sensor_type( LEGO_NXT_TOUCH ));

ev3_sensor_init();

if ( ev3_search_sensor_plugged_in( INPUT_1, HT_NXT_SMUX_PORT_2, &sn, 0 )) {
	if ( get_sensor_value( 0, sn, &val )) {
		printf( "TOUCH sensor value = %d\n", val );
	}
}
set_port_mode_inx( sn_port, INPUT_AUTO );
ev3_uninit();
\endcode
<P>Basic functions to access the attributes of \ref ev3_sensor "LEGO Sensors", see
<A HREF="http://www.ev3dev.org/docs/drivers/lego-sensor-class/">"LEGO Sensor Class"</A>.</P>
\code {.c}
uint8_t sn;
int val;

ev3_init();

if ( ev3_search_sensor( LEGO_EV3_TOUCH, &sn, 0 )) {
	if ( get_sensor_value( 0, sn, &val )) {
		printf( "TOUCH sensor value = %d\n", val );
	}
}
ev3_uninit();
\endcode
<P>Basic functions to access the attributes of \ref ev3_tacho "Tacho Motors", see
<A HREF="http://www.ev3dev.org/docs/drivers/tacho-motor-class/">"Tacho Motor Class"</A>.</P>
\code {.c}
uint8_t sn;

ev3_init();
ev3_tacho_init();

if ( ev3_search_tacho( LEGO_EV3_L_MOTOR, &sn, 0 )) {
	set_tacho_stop_command_inx( sn, TACHO_BRAKE );
	set_tacho_duty_cycle_sp( sn, 100 );
	set_tacho_time_sp( sn, 5000 );
	set_tacho_ramp_up_sp( sn, 2000 );
	set_tacho_ramp_down_sp( sn, 2000 );
	set_tacho_command( sn, "run_timed" );
}
ev3_uninit();
\endcode
<P>Basic functions to access the attributes of \ref ev3_dc "DC Motors", see
<A HREF="http://www.ev3dev.org/docs/drivers/dc-motor-class/">"DC Motor Class"</A>.</P>
\code {.c}
uint8_t sn, sn_port;

ev3_init();
ev3_port_init();
sn_port = ev3_search_port( OUTPUT_D, EXT_PORT__NONE_ );
set_port_mode_inx( sn_port, OUTPUT_RCX_MOTOR );
ev3_dc_init();

if ( ev3_search_dc_plugged_in( OUTPUT_D, EXT_PORT__NONE_, &sn, 0 )) {
	set_dc_duty_cycle( sn, 100 );
	set_dc_command_inx( sn, DC_RUN_FOREVER );
	Sleep( 5000 );
	set_dc_command_inx( sn, DC_STOP );
}
set_port_mode_inx( sn_port, OUTPUT_AUTO );
ev3_uninit();
\endcode
<P>Basic functions to access the attributes of \ref ev3_servo "Servo Motors", see
<A HREF="http://www.ev3dev.org/docs/drivers/servo-motor-class/">"Servo Motor Class"</A>.</P>
\code {.c}
uint8_t sn, sn_port;

ev3_init();
ev3_port_init();

sn_port = ev3_search_port( INPUT_1, EXT_PORT__NONE_ );
set_port_mode_inx( sn_port, INPUT_NXT_ANALOG );
set_port_set_device( sn_port, ( char* ) ev3_sensor_type( MS_8CH_SERVO ));

ev3_servo_init();

if ( ev3_search_servo_plugged_in( INPUT_1, EXT_PORT__NONE_, 1, &sn, 0 )) {
	set_servo_command_inx( sn, SERVO_RUN );
	set_servo_position_sp( sn, 100 );
}
set_port_mode_inx( sn_port, INPUT_AUTO );
ev3_uninit();
\endcode

<H3>III	LEVEL</H3>

<P>Task-focused user-friendly functions. Only \ref ev3_light "light" module in
this category at the moment.</P>
\code {.c}
	ev3_init();

	set_light_blink( LIT_LEFT, LIT_AMBER, 1000, 500 );

	ev3_uninit();
\endcode

<BR><HR>
<H2>Python, Ruby, Perl and other languages</H2>

The <A HREF="https://pypi.python.org/pypi/ev3dev-c/">libraries</A> for Python, Ruby and Perl
have been generated using <A HREF="http://www.swig.org/">SWIG</A>.
The SWIG interface file called "ev3.i", its source is
<A HREF="https://github.com/in4lio/ev3dev-c/blob/master/ev3.yu-i">"ev3.yu-i"</A>.
<P>Features of Python library:

1. The functions return the requested value as the second element of the result tuple;
2. Access to the descriptors of detected devices only through ev3_<class>_desc or
ev3_<class>_desc_<field> functions (e.g. \ref ev3_sensor_desc, \ref ev3_port_desc);
3. Access to the global variables through "ev3" namespace.</P>
\code {.py}
color = [ '?', 'BLACK', 'BLUE', 'GREEN', 'YELLOW', 'RED', 'WHITE', 'BROWN' ]

if not EV3_BRICK:
    ev3.brick_addr = '192.168.0.244'
ev3_init()
ev3_sensor_init()

ok, sn = ev3_search_sensor( LEGO_EV3_UART_29 )
if ok:
    set_sensor_mode( sn, 'COL-COLOR' )

    ok, val = get_sensor_value( 0, sn )
    if ok:
        print 'COLOR =', color[ val ]

ev3_uninit()
\endcode
<P>Features of Ruby library:
1. The functions return the requested value as the second element of the result tuple,
the first element has a boolean type;
2. Access to the descriptors of detected devices only through ev3_<class>_desc or
ev3_<class>_desc_<field> functions (e.g. \ref ev3_dc_desc, \ref ev3_dc_desc_port).</P>
\code {.py}
include Ev3
ev3_init()
ev3_sensor_init()

ok, sn = ev3_search_sensor( LEGO_EV3_TOUCH )
if ok
  while get_sensor_value( 0, sn )[ 1 ] == 0 do end
end

ev3_uninit()
\endcode
<P>Features of Perl library:
1. The functions return the requested value as the second element of the result tuple;
2. Access to the descriptors of detected devices only through ev3_<class>_desc_<field> functions
(e.g. \ref ev3_tacho_desc_type_inx, \ref ev3_tacho_desc_port).</P>
\code {.c}
use ev3;

ev3::ev3_init();
ev3::ev3_tacho_init();

my ( $ok, $sn ) = ev3::ev3_search_tacho( $ev3::LEGO_EV3_M_MOTOR );
if ( $ok ) {
    ev3::set_tacho_duty_cycle_sp( $sn, 50 );
    ev3::set_tacho_command_inx( $sn, $ev3::TACHO_RUN_FOREVER );
    sleep( 2 );
    ev3::set_tacho_command_inx( $sn, $ev3::TACHO_STOP );
}
ev3::ev3_uninit();
\endcode
<P><I>Similarly, you can use SWIG to wrap the library in a number of other languages.</I></P>
 */

/** \page eg_c Examples in C
\include light.c
\include tacho.c
\include sensor.c
\include port.c
\include dc.c
\include servo.c
\include rcx_led.c
\include io.c
\include poweroff.c
 */

/** \page eg_python Examples in Python
\include light.py
\include tacho.py
\include sensor.py
\include port.py
\include dc.py
\include led.py
\include io.py
\include poweroff.py
 */

/** \page eg_ruby Examples in Ruby
\include light.rb
\include tacho.rb
\include sensor.rb
\include led.rb
\include io.rb
\include poweroff.rb
 */

/** \page eg_perl Examples in Perl
\include light.pl
\include tacho.pl
\include sensor.pl
\include led.pl
\include io.pl
\include poweroff.pl
 */
