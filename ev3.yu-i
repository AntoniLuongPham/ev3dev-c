($import "app.yu")
($TITLE,,SWIG interface file.)
($macro h-extern () extern)
($macro h-extern-init ( dec init ) extern ($dec) = ($init);)

%module ev3
%include "cstring.i"
%include "stdint.i"
%include "typemaps.i"

%{
#include "../source/ev3/ev3.h"
#include "../source/ev3/ev3_led.h"
#include "../source/ev3/ev3_light.h"
#include "../source/ev3/ev3_port.h"
#include "../source/ev3/ev3_sensor.h"
#include "../source/ev3/ev3_tacho.h"
#include "../source/ev3/ev3_dc.h"
#include "../source/ev3/ev3_servo.h"
%}

%define ALLOC_OUTPUT_BUFFER(TYPEMAP,MAX)
%typemap(in,noblock=1,numinputs=0) TYPEMAP (char temp[MAX+1]) {
  $1 = ($1_ltype) temp;
}
%enddef

/* String buffer without size is passed only for getting a port name */
ALLOC_OUTPUT_BUFFER( char *buf, 64 );

/* Unfortunately incompatible with %typemap( default ) size_t sz { $1 = DEFAULT_BUF_SIZE; } */
%cstring_output_maxsize( char *buf, size_t sz );

%include "./platform.h"

#ifdef SWIGPERL
/* because of the problem with SWIG_From_bool on the brick... */
#define bool  int

#endif

%apply uint8_t *OUTPUT { uint8_t *sn };
%apply bool *OUTPUT { bool *buf };
%apply int *OUTPUT { int *buf };
%apply uint8_t *OUTPUT { uint8_t *buf };
%apply uint8_t *OUTPUT { byte *buf };
%apply uint32_t *OUTPUT { uint32_t *buf };
%apply uint32_t *OUTPUT { dword *buf };
%apply float *OUTPUT { float *buf };
%apply uint8_t *OUTPUT { FLAGS_T *flags };

%apply uint32_t { dword };
%apply uint8_t { byte };
%apply uint8_t { INX_T };
%apply uint8_t { FLAGS_T };

#ifdef SWIGRUBY
%typemap( out ) size_t, bool { $result = $1 ? Qtrue : Qfalse; };
%typemap( in ) bool { $1 = $input == Qtrue ? 1 : 0; };

#endif

%typemap( default ) uint8_t from { $1 = 0; };

($import stdlib)

/*
 *  ev3
 */

// CLIENT ////////////////////////////////////////
#if EV3_BRICK == 0

%rename( brick_addr ) ev3_brick_addr;
($h-extern) char *ev3_brick_addr;
%rename( brick_port ) ev3_brick_port;
($h-extern) uint16_t ev3_brick_port;

//////////////////////////////////////////////////
#endif

($h-extern) int ev3_init( void );
($h-extern) void ev3_uninit( void );

($h-extern) size_t ev3_write_binary( const char *fn, char *STRING, size_t LENGTH );
($h-extern) size_t ev3_write( const char *fn, char *value );
($h-extern) size_t ev3_write_bool( const char *fn, bool value );
($h-extern) size_t ev3_write_int( const char *fn, int value );
($h-extern) size_t ev3_write_dword( const char *fn, uint32_t value );
($h-extern) size_t ev3_write_byte( const char *fn, uint8_t value );
($h-extern) size_t ev3_write_float( const char *fn, float value );

($h-extern) size_t ev3_read_binary( const char *fn, char *buf, size_t sz );
($h-extern) size_t ev3_read( const char *fn, char *buf, size_t sz );

#ifndef SWIGRUBY
($h-extern) size_t ev3_read_bool( const char *fn, bool *buf );

#endif
($h-extern) size_t ev3_read_int( const char *fn, int *buf );
($h-extern) size_t ev3_read_dword( const char *fn, uint32_t *buf );
($h-extern) size_t ev3_read_byte( const char *fn, uint8_t *buf );
($h-extern) size_t ev3_read_float( const char *fn, float *buf );

($h-extern) size_t ev3_listdir( const char *fn, char *buf, size_t sz );
($h-extern) size_t ev3_read_keys( uint8_t *buf );
($h-extern) bool ev3_poweroff( void );

enum {
	EV3_KEY__NONE_ = 0,

	EV3_KEY_UP     = 0x01L,
	EV3_KEY_DOWN   = 0x02L,
	EV3_KEY_LEFT   = 0x04L,
	EV3_KEY_RIGHT  = 0x08L,
	EV3_KEY_CENTER = 0x10L,
	EV3_KEY_BACK   = 0x20L,
};

($import "tools.py")

($import { clip_h( "../source/ev3/ev3_led.yu-h" ) })
($import { clip_h( "../source/ev3/ev3_light.yu-h" ) })
($import { clip_h( "../source/ev3/ev3_port.yu-h" ) })
($import "../source/ev3/ev3_class_clean.yu")
($import { clip_h( "../source/ev3/ev3_sensor.yu-h" ) })
($import "../source/ev3/ev3_class_clean.yu")
($import { clip_h( "../source/ev3/ev3_tacho.yu-h" ) })
($import "../source/ev3/ev3_class_clean.yu")
($import { clip_h( "../source/ev3/ev3_dc.yu-h" ) })
($import "../source/ev3/ev3_class_clean.yu")
($import { clip_h( "../source/ev3/ev3_servo.yu-h" ) })
