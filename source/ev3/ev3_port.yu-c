($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

($import "app.yu")
($TITLE,,EV3 Ports.)

($import stdlib)
($import h)

($implement-named)

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "modp_numtoa.h"
#include "ev3.h"
#include "ev3_port.h"

($import "ev3_port-dict.yu")
($import "ev3_class-dict.yu")
($import "ev3_class.yu")

($each-CLASS_TYPE \i.]

	($set j ($index CLASS_TYPE_NAME ($i PORT_PARENT)) ? ($i PORT_PARENT) | i)  ($! parent index )

	static const char * const ($i CLASS_TYPE_ID)_name[] = {
		($($j PORT_SUFS) \jj.]
			($if ($i PORT_PARENT) ]
				($($i PORT_SUFS) \ii.]
					($q,,($unq ($j PORT_PREF))($jj):($unq ($i PORT_PREF))($ii)),

				[ )
			[ \else ]
				($q,,($unq ($j PORT_PREF))($jj)),
			[ )

		[ )
	};

	#define ($upper ($i CLASS_TYPE_ID))_PARENT_LEN  ($add ($len,,($unq ($j PORT_PREF))) 1)
	#define ($upper ($i CLASS_TYPE_ID))_LEN  ($add ($len,,($unq ($i PORT_PREF))) 1)
	($if ($i PORT_PARENT) ]
		#define ($upper ($i CLASS_TYPE_ID))_FULL_LEN  ( ($upper ($i CLASS_TYPE_ID))_PARENT_LEN + ($upper ($i CLASS_TYPE_ID))_LEN + 1 )
	[ \else ]
		#define ($upper ($i CLASS_TYPE_ID))_FULL_LEN  ($upper ($i CLASS_TYPE_ID))_LEN
	[ )

	static uint8_t ($i CLASS_TYPE_ID)_inx( uint8_t type_inx, const char *name )
	{
		if (( type_inx != ($upper ($i CLASS_TYPE_ID)) ) && ( type_inx != PORT_TYPE__NONE_ )) return ( EV3_PORT__NONE_ );

		if ( strncmp( name, ($i PORT_PREF), ($upper ($i CLASS_TYPE_ID))_LEN - 1 ) == 0 ) {
			name += ($upper ($i CLASS_TYPE_ID))_LEN - 1;
			switch ( *name ) {
			($($i PORT_SUFS) \ii.]
				case ($qs ii):
					return ($upper ($i CLASS_TYPE_ID))_($ii);

			[ )
			}
		}
		return ( EV3_PORT__NONE_ );
	}

[ )

static uint8_t __search_extport( uint8_t port )
{
	uint8_t sn;

	for ( sn = 0; sn < PORT_DESC__LIMIT_; sn++ ) {
		if (( ev3_port[ sn ].port == port ) && ( ev3_port[ sn ].extport != EXT_PORT__NONE_ )) {
			return ( ev3_port[ sn ].type_inx );
		}
		++sn;
	}
	return ( PORT_TYPE__NONE_ );
}

uint8_t ev3_port_inx( uint8_t type_inx, const char *name, uint8_t *extport )
{
	uint8_t port = EV3_PORT__NONE_;

	*extport = EXT_PORT__NONE_;
	($each-CLASS_TYPE \i.]

		($set j  ($index CLASS_TYPE_NAME ($i PORT_PARENT)) ? ($i PORT_PARENT) | i)  ($! parent index )

		if ( strlen( name ) == ($upper ($i CLASS_TYPE_ID))_FULL_LEN ) {
			if ( port == EV3_PORT__NONE_ ) port = ($j CLASS_TYPE_ID)_inx( type_inx, name );
			if ( port != EV3_PORT__NONE_ ) {
				($if ($i PORT_PARENT) ]
					if ( type_inx == PORT_TYPE__NONE_ ) type_inx = __search_extport( port );
					*extport = ($i CLASS_TYPE_ID)_inx( type_inx, name + ($upper ($i CLASS_TYPE_ID))_PARENT_LEN + 1 );
					if ( *extport != EXT_PORT__NONE_ ) {
						return ( port );
					}
				[ \else ]
					return ( port );
				[ )
			}
		}

	[ )
 	return ( port );
}

const char *ev3_port_name( uint8_t port, uint8_t extport )
{
	($each-CLASS_TYPE \i.]
		($if ($i PORT_PARENT) ]
			($set j ($index CLASS_TYPE_NAME ($i PORT_PARENT)))  ($! parent index )
			if (( extport >= ($upper ($i CLASS_TYPE_ID))__BASE_ ) && ( extport < ($upper ($i CLASS_TYPE_ID))__BASE_ + ($upper ($i CLASS_TYPE_ID))__COUNT_ )
			 && ( port >= ($upper ($j CLASS_TYPE_ID))__BASE_ ) && ( port < ($upper ($j CLASS_TYPE_ID))__BASE_ + ($upper ($j CLASS_TYPE_ID))__COUNT_ )) {
				return ($i CLASS_TYPE_ID)_name[ ( port - ($upper ($j CLASS_TYPE_ID))__BASE_ ) * ($upper ($i CLASS_TYPE_ID))__COUNT_ + ( extport - ($upper ($i CLASS_TYPE_ID))__BASE_ ) ];
			}
		[ \else ]
			if (( extport == EXT_PORT__NONE_ )
			 && ( port >= ($upper ($i CLASS_TYPE_ID))__BASE_ ) && ( port < ($upper ($i CLASS_TYPE_ID))__BASE_ + ($upper ($i CLASS_TYPE_ID))__COUNT_ )) {
				return ($i CLASS_TYPE_ID)_name[ port - ($upper ($i CLASS_TYPE_ID))__BASE_ ];
			}
		[ )

	[ )
	return ( STR_unknown_ );
}

uint8_t ev3_search_port( uint8_t port, uint8_t extport )
{
	uint8_t sn;

	ev3_search_port_plugged_in( port, extport, &sn, 0 );
	return ( sn );
}

