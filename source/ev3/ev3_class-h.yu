($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

($set _CLASS ($unq CLASS_TITLE))
($set _CLASS_1 _CLASS ? { _CLASS[ 0 ].isupper() } | ($capitalize _CLASS))

#define ($upper CLASS_ID)_DIR  ($CLASS_PATH)  /**< Directory of ($_CLASS)s. */

/**
 *  \brief Structure of a ($_CLASS) descriptor.
 */
typedef struct {
	($each-CLASS_DESC \i.]
		($i CLASS_DESC_TYPE) ($i CLASS_DESC_ID);  /**< ($_CLASS_1) ($unq ($i CLASS_DESC_COMMENT)). */

	[ )
} EV3_($upper CLASS_ID);

#define ($upper CLASS_ID)_DESC__LIMIT_  64  /**< Limit of ($_CLASS) descriptors. */

#define ($upper CLASS_ID)__NONE_  ($upper CLASS_ID)_DESC__LIMIT_  /**< ($_CLASS_1) is not found. */

/**
 *  \brief Vector of ($_CLASS) descriptors (filled by \ref ev3_($CLASS_ID)_init).
 */
($h-extern) EV3_($upper CLASS_ID) ev3_($CLASS_ID)[ ($upper CLASS_ID)_DESC__LIMIT_ ];

/**
 *  \brief Identifiers of ($_CLASS) types.
 */
enum {
	($upper CLASS_ID)_TYPE__NONE_ = 0,  /* XXX: memset( 0 ) is used */

	($each-CLASS_TYPE \i.]
		($upper ($i CLASS_TYPE_ID)),

	[ )
	($upper CLASS_ID)_TYPE__COUNT_,  /**< Count of ($_CLASS) types. */
	($upper CLASS_ID)_TYPE__UNKNOWN_ = ($upper CLASS_ID)_TYPE__COUNT_
};

($CLASS_ATTR_INDEX \attr.]

	/**
	 *  \brief Identifiers of ($_CLASS) ($attr)s.
	 */
	enum {
		($upper CLASS_ID)_($upper attr)__NONE_ = 0,

		($each-CLASS_TYPE \i.]
			($($i ($$'CLASS_TYPE_($0)S' ($upper attr))) \ii.]
				($upper ($i CLASS_TYPE_ID))_($upper ($_VALUE_TO_ID ii)),

			[ )

		[ )
		($upper CLASS_ID)_($upper attr)__COUNT_,  /**< Count of ($_CLASS) ($attr)s. */
		($upper CLASS_ID)_($upper attr)__UNKNOWN_ = ($upper CLASS_ID)_($upper attr)__COUNT_
	};

[ )

($each-CLASS_ATTR \i.]
	($if ($le ($i CLASS_ATTR_WRITE) RW) ]
		/**
		 *  \brief Get ($i CLASS_ATTR_NAME) attribute of the ($_CLASS).
		 *  \param sn Sequence number.
		 *  \param[out] buf Buffer for result.
		 ($[*  \param sz Buffer size.] ? ($i CLASS_ATTR_ARRAY))
		 *  \return Count of read bytes.
		 */
		($h-extern) size_t get_($CLASS_ID)_($i CLASS_ATTR_ID)( uint8_t sn, ($i CLASS_ATTR_TYPE) *buf($[, size_t sz] ? ($i CLASS_ATTR_ARRAY)) );

	[ )
	($if ($ge ($i CLASS_ATTR_WRITE) RW) ]
		/**
		 *  \brief Set ($i CLASS_ATTR_NAME) attribute of the ($_CLASS).
		 *  \param sn Sequence number.
		 *  \param value Attribute value.
		 ($[*  \param sz Size of attribute value.] ? ($eq ($i CLASS_ATTR_ARRAY) 2))
		 *  \return Count of written bytes.
		 */
		($h-extern) size_t set_($CLASS_ID)_($i CLASS_ATTR_ID)( uint8_t sn, ($i CLASS_ATTR_TYPE) ($[*] ? ($i CLASS_ATTR_ARRAY))value($[, size_t sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) );

	[ )

[ )

($each-CLASS_AVEC \i.]
	/**
	 *  \brief Get ($i CLASS_AVEC_NAME) attribute of the ($_CLASS).
	 *  \param inx Attribute index.
	 *  \param sn Sequence number.
	 *  \param[out] buf Buffer for result.
	 ($[*  \param sz Buffer size.] ? ($i CLASS_AVEC_ARRAY))
	 *  \return Count of read bytes.
	 */
	($h-extern) size_t get_($CLASS_ID)_($i CLASS_AVEC_ID)( uint8_t inx, uint8_t sn, ($i CLASS_AVEC_TYPE) *buf($[, size_t sz] ? ($i CLASS_AVEC_ARRAY)) );

[ )

/**
 *  \brief Get name of the specified ($_CLASS) type.
 *  \param type_inx Index of the ($_CLASS) type.
 *  \return Requested value.
 */
($h-extern) const char *ev3_($CLASS_ID)_type( uint8_t type_inx );

/**
 *  \brief Get index of the ($_CLASS) type.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
($h-extern) uint8_t get_($CLASS_ID)_type_inx( uint8_t sn );

/**
 *  \brief Get indexes of the EV3 port and the extended port of the ($_CLASS).
 *  \param sn Sequence number.
 *  \param port_type_inx Port type.
 *  \param extport Buffer for the extended port index.
 *  \return EV3 port index.
 */
($h-extern) uint8_t get_($CLASS_ID)_port_inx( uint8_t sn, uint8_t port_type_inx, uint8_t *extport );

/**
 *  \brief Get descriptor of the ($_CLASS).
 *  \param sn Sequence number.
 *  \return Pointer to the ($_CLASS) descriptor.
 */
($h-extern) EV3_($upper CLASS_ID) *ev3_($CLASS_ID)_desc( uint8_t sn );

($each-CLASS_DESC \i.]
	/**
	 *  \brief Get ($unq ($i CLASS_DESC_COMMENT)) from the ($_CLASS) descriptor.
	 *  \param sn Sequence number.
	 *  \return Requested value.
	 */
	($h-extern) ($i CLASS_DESC_TYPE) ev3_($CLASS_ID)_desc_($i CLASS_DESC_ID)( uint8_t sn );

[ )

/**
 *  \brief Search of a sequence number of the specified ($_CLASS) type.
 *  \param type_inx The ($_CLASS) type.
 *  \param[out] sn Buffer for the sequence number.
 *  \param from Search initial value.
 *  \return Flag - the ($_CLASS) is found.
 */
($h-extern) bool ev3_search_($CLASS_ID)($[_type] ? ($eq CLASS_ID [port]))( uint8_t type_inx, uint8_t *sn, uint8_t from );

/**
 *  \brief Search of a sequence number the ($_CLASS) by plug-in attributes.
 *  \param port EV3 port.
 *  \param extport Extended port.
 ($[*  \param addr Address.] ? ($CLASS_DESC_ADDR))
 *  \param[out] sn Buffer for the sequence number.
 *  \param from Search initial value.
 *  \return Flag - the ($_CLASS) is found.
 */
($h-extern) bool ev3_search_($CLASS_ID)_plugged_in( uint8_t port, uint8_t extport, ($[uint8_t addr, ] ? ($CLASS_DESC_ADDR))uint8_t *sn, uint8_t from );

($CLASS_ATTR_INDEX \attr.]

	/**
	 *  \brief Get name of the specified ($_CLASS) ($attr).
	 *  \param ($attr)_inx Index of the ($_CLASS) ($attr).
	 *  \return Requested value.
	 */
	($h-extern) const char *ev3_($CLASS_ID)_($attr)( uint8_t ($attr)_inx );

	($if ($le ($($index CLASS_ATTR_NAME ($q attr)) CLASS_ATTR_WRITE) RW) ]
		/**
		 *  \brief Get index of the ($_CLASS) ($attr).
		 *  \param sn Sequence number.
		 *  \param type_inx Index of the ($_CLASS) type.
		 *  \return Requested value.
		 */
		($h-extern) uint8_t get_($CLASS_ID)_($attr)_inx( uint8_t sn, uint8_t type_inx );

	[ )
	/**
	 *  \brief Set ($attr) of the ($_CLASS) by index.
	 *  \param sn Sequence number.
	 *  \param ($attr)_inx Index of the ($_CLASS) ($attr).
	 *  \return Count of written bytes.
	 */
	($h-extern) size_t set_($CLASS_ID)_($attr)_inx( uint8_t sn, uint8_t ($attr)_inx );

[ )

/**
 *  \brief Detect connected ($_CLASS)s.
 *  \return The number of found ($_CLASS)s or -1 in case of an error.
 */
($h-extern) int ev3_($CLASS_ID)_init( void );
