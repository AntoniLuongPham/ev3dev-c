
/*  nxt_input_mux.h was generated by yup.py (yupp) 0.7b7
    out of nxt_input_mux.yu-h at 2014-11-14 18:12
 *//**
 *  \file  nxt_input_mux.h (nxt_input_mux.yu-h)
 *  \brief  NXT Multiplexer Input Ports.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

#ifndef NXT_INPUT_MUX_H
#define NXT_INPUT_MUX_H

#ifdef  NXT_INPUT_MUX_IMPLEMENT
#define NXT_INPUT_MUX_EXT
#define NXT_INPUT_MUX_EXT_INIT( dec, init ) \
	dec = init
#else
#define NXT_INPUT_MUX_EXT extern
#define NXT_INPUT_MUX_EXT_INIT( dec, init ) \
	extern dec
#endif

#ifndef COMMA
#define COMMA   ,
#endif

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 *  \addtogroup ev3_port
 *  \{
 */

/**
 *  \brief Identifiers of multiplexer input ports.
 */
enum {
	INPUT_MUX__NONE_,
	INPUT_MUX_1,
	INPUT_MUX_2,
	INPUT_MUX_3,
	INPUT_MUX_4,

};

#define INPUT_MUX__BASE_  1  /**< Base index of multiplexer ports. */
#define INPUT_MUX__COUNT_  4  /**< Count of multiplexer ports. */

/**
 *  \brief Identifiers of multiplexer port modes.
 */
enum {
	INPUT_MUX_ANALOG,
	INPUT_MUX_I2C,

	INPUT_MUX_MODE__COUNT_  /**< Count of multiplexer port modes. */
};

/**
 *  \brief Get indexes of the EV3 input port and the extended port from the multiplexer port name.
 *  \param name Port name.
 *  \param extport Buffer for the extended port index.
 *  \return EV3 input port index.
 */
NXT_INPUT_MUX_EXT uint8_t nxt_input_mux_inx( const char *name, uint8_t *extport );

/**
 *  \brief Get name of the specified multiplexer port.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \return Requested value.
 */
NXT_INPUT_MUX_EXT const char *nxt_input_mux_name( uint8_t port, uint8_t extport );

/**
 *  \brief Get "mode" attribute of the multiplexer port.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
NXT_INPUT_MUX_EXT size_t get_input_mux_mode( uint8_t port, uint8_t extport, char *buf, size_t sz );

/**
 *  \brief Set "mode" attribute of the multiplexer port.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \param value Attribute value.

 *  \return Count of written bytes.
 */
NXT_INPUT_MUX_EXT size_t set_input_mux_mode( uint8_t port, uint8_t extport, char *value );

/**
 *  \brief Get "modes" attribute of the multiplexer port.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
NXT_INPUT_MUX_EXT size_t get_input_mux_modes( uint8_t port, uint8_t extport, char *buf, size_t sz );

/**
 *  \brief Get name of the specified multiplexer port mode.
 *  \param mode_inx Index of the multiplexer port mode.
 *  \return Requested value.
 */
NXT_INPUT_MUX_EXT const char *nxt_input_mux_mode( uint8_t mode_inx );

/**
 *  \brief Get the mode index of the multiplexer port.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \return Index of the mode or INPUT_MUX_MODE__COUNT_ - error has occurred.
 */
NXT_INPUT_MUX_EXT uint8_t get_input_mux_mode_inx( uint8_t port, uint8_t extport );

/**
 *  \brief Set the mode of the multiplexer port by index.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \param mode_inx Index of the mode.
 *  \return Count of written bytes.
 */
NXT_INPUT_MUX_EXT size_t set_input_mux_mode_inx( uint8_t port, uint8_t extport, uint8_t mode_inx );

/** \} */

#ifdef __cplusplus
}
#endif

#endif

