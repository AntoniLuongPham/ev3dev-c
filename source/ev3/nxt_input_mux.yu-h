($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

($import "app.yu")
($TITLE,,NXT Multiplexer Input Ports.)

($import stdlib)
($import h)

($h-begin-named)

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

($extern-c-begin)

/**
 *  \addtogroup ev3_port
 *  \{
 */

($import "ev3_input-dict.yu")
($import "nxt_input_mux-dict.yu")

/**
 *  \brief Identifiers of multiplexer input ports.
 */
enum {
	INPUT_MUX__NONE_,
	($PORT_EXT \i.]
		INPUT_MUX_($i),

	[ )
};

#define INPUT_MUX__BASE_  1  /**< Base index of multiplexer ports. */
#define INPUT_MUX__COUNT_  ($len PORT_EXT)  /**< Count of multiplexer ports. */

/**
 *  \brief Identifiers of multiplexer port modes.
 */
enum {
	($each-PORT_MODE \i.]
		INPUT_MUX_($upper ($i PORT_MODE_ID)),

	[ )
	INPUT_MUX_MODE__COUNT_  /**< Count of multiplexer port modes. */
};

/**
 *  \brief Get indexes of the EV3 input port and the extended port from the multiplexer port name.
 *  \param name Port name.
 *  \param extport Buffer for the extended port index.
 *  \return EV3 input port index.
 */
($h-extern) uint8_t nxt_input_mux_inx( const char *name, uint8_t *extport );

/**
 *  \brief Get name of the specified multiplexer port.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \return Requested value.
 */
($h-extern) const char *nxt_input_mux_name( uint8_t port, uint8_t extport );

($each-PORT_ATTR \i.]

	($if ($le ($i PORT_ATTR_WRITE) RW) ]
		/**
		 *  \brief Get ($i PORT_ATTR_NAME) attribute of the multiplexer port.
		 *  \param port Port index.
		 *  \param extport Extended port index.
		 *  \param[out] buf Buffer for result.
		 ($[*  \param sz Buffer size.] ? ($i PORT_ATTR_ARRAY))
		 *  \return Count of read bytes.
		 */
		($h-extern) size_t get_input_mux_($i PORT_ATTR_ID)( uint8_t port, uint8_t extport, ($i PORT_ATTR_TYPE) *buf($[, size_t sz] ? ($i PORT_ATTR_ARRAY)) );
	[ )

	($if ($ge ($i PORT_ATTR_WRITE) RW) ]
		/**
		 *  \brief Set ($i PORT_ATTR_NAME) attribute of the multiplexer port.
		 *  \param port Port index.
		 *  \param extport Extended port index.
		 *  \param value Attribute value.
		 ($[*  \param sz Size of attribute value.] ? ($eq ($i PORT_ATTR_ARRAY) 2))
		 *  \return Count of written bytes.
		 */
		($h-extern) size_t set_input_mux_($i PORT_ATTR_ID)( uint8_t port, uint8_t extport, ($i PORT_ATTR_TYPE) ($[*] ? ($i PORT_ATTR_ARRAY))value($[, size_t sz] ? ($eq ($i PORT_ATTR_ARRAY) 2)) );
	[ )

[ )

/**
 *  \brief Get name of the specified multiplexer port mode.
 *  \param mode_inx Index of the multiplexer port mode.
 *  \return Requested value.
 */
($h-extern) const char *nxt_input_mux_mode( uint8_t mode_inx );

/**
 *  \brief Get the mode index of the multiplexer port.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \return Index of the mode or INPUT_MUX_MODE__COUNT_ - error has occurred.
 */
($h-extern) uint8_t get_input_mux_mode_inx( uint8_t port, uint8_t extport );

/**
 *  \brief Set the mode of the multiplexer port by index.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \param mode_inx Index of the mode.
 *  \return Count of written bytes.
 */
($h-extern) size_t set_input_mux_mode_inx( uint8_t port, uint8_t extport, uint8_t mode_inx );

/** \} */

($extern-c-end)

($h-end)
