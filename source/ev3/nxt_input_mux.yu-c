($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

($import "app.yu")
($TITLE,,NXT Multiplexer Input Ports.)

($import stdlib)
($import h)

($implement-named)

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "ev3.h"
#include "ev3_port.h"
#include "ev3_input.h"
#include "nxt_input_mux.h"

($import "ev3_input-dict.yu")
($import "nxt_input_mux-dict.yu")

#define PORT_PATH_LEN  ($add ($len,,($unq PORT_PATH)) 1)  /* ($q,,($unq PORT_PATH)/) */
#define PORT_NAME_LEN  ($add ($len,,($unq PORT_PREF)($unq PORT_EXT_PREF)) 3)  /* ($q,,($unq PORT_PREF)0:($unq PORT_EXT_PREF)0) */

const char *nxt_input_mux_name( uint8_t port, uint8_t extport )
{
	switch ( port ) {
	($PORT \i.]
	case INPUT_($i):
		switch ( extport ) {
		case INPUT_MUX__NONE_:
			return ($q,,($unq PORT_PREF)($i));
		($PORT_EXT \ii.]
		case INPUT_MUX_($ii):
			return ($q,,($unq PORT_PREF)($i):($unq PORT_EXT_PREF)($ii));

		[ )
		}

	[ )
	}
	return STR_unknown_;
}

uint8_t nxt_input_mux_inx( const char *name, uint8_t *extport )
{
	uint8_t port = EV3_PORT__NONE_;

	*extport = INPUT_MUX__NONE_;
	if ( strlen( name ) != PORT_NAME_LEN ) return ( EV3_PORT__NONE_ );

	($PORT \i.]
		if ( strncmp( name, ($q,,($unq PORT_PREF)($i)), ($len,,($unq PORT_PREF)($i)) ) == 0 ) port = INPUT_($i);

	[ )
	if ( port == EV3_PORT__NONE_ ) return ( EV3_PORT__NONE_ );

	name += ($add ($len,,($unq PORT_PREF)) 2);
	($PORT_EXT \i.]
		if ( strncmp( name, ($q,,($unq PORT_EXT_PREF)($i)), ($len,,($unq PORT_EXT_PREF)($i)) ) == 0 ) *extport = INPUT_MUX_($i);

	[ )
	if ( *extport == INPUT_MUX__NONE_ ) return ( EV3_PORT__NONE_ );

	return ( port );
}

($each-PORT_ATTR \i.]

	($if ($le ($i PORT_ATTR_WRITE) RW) ]
		size_t get_input_mux_($i PORT_ATTR_ID)( uint8_t port, uint8_t extport, ($i PORT_ATTR_TYPE) *buf($[, size_t sz] ? ($i PORT_ATTR_ARRAY)) )
		{
			char s[ 64 ] = ($PORT_PATH) "/";

			if (( port - INPUT__BASE_ >= INPUT__COUNT_ ) || ( extport - INPUT_MUX__BASE_ >= INPUT_MUX__COUNT_ )) return ( 0 );

			strcpy( s + PORT_PATH_LEN, nxt_input_mux_name( port, extport ));
			strcpy( s + PORT_PATH_LEN + PORT_NAME_LEN, "/" ($i PORT_ATTR_NAME) );
			return ev3_read_($i PORT_ATTR_TYPE)($[_array] ? ($i PORT_ATTR_ARRAY))( s, buf($[, sz] ? ($i PORT_ATTR_ARRAY)) );
		}
	[ )

	($if ($ge ($i PORT_ATTR_WRITE) RW) ]
		size_t set_input_mux_($i PORT_ATTR_ID)( uint8_t port, uint8_t extport, ($i PORT_ATTR_TYPE) ($[*] ? ($i PORT_ATTR_ARRAY))value($[, size_t sz] ? ($eq ($i PORT_ATTR_ARRAY) 2)) )
		{
			char s[ 64 ] = ($PORT_PATH) "/";

			if (( port - INPUT__BASE_ >= INPUT__COUNT_ ) || ( extport - INPUT_MUX__BASE_ >= INPUT_MUX__COUNT_ )) return ( 0 );

			strcpy( s + PORT_PATH_LEN, nxt_input_mux_name( port, extport ));
			strcpy( s + PORT_PATH_LEN + PORT_NAME_LEN, "/" ($i PORT_ATTR_NAME) );
			return ev3_write_($i PORT_ATTR_TYPE)($[_array] ? ($i PORT_ATTR_ARRAY))( s, value );
		}
	[ )

[ )

const char *nxt_input_mux_mode( uint8_t mode_inx )
{
	switch ( mode_inx ) {
	($each-PORT_MODE \i.]
	case INPUT_MUX_($upper ($i PORT_MODE_ID)):
		return ($i PORT_MODE_NAME);

	[ )
	}
	return STR_unknown_;
}

uint8_t get_input_mux_mode_inx( uint8_t port, uint8_t extport )
{
	char buf[ 64 ];

	if ( !get_input_mux_mode( port, extport, buf, sizeof( buf ))) return ( INPUT_MUX_MODE__COUNT_ );

	($each-PORT_MODE \i.]
		if ( strcmp( buf, ($i PORT_MODE_NAME) ) == 0 ) return INPUT_MUX_($upper ($i PORT_MODE_ID));

	[ )
	return ( INPUT_MUX_MODE__COUNT_ );
}

size_t set_input_mux_mode_inx( uint8_t port, uint8_t extport, uint8_t mode_inx )
{
	return set_input_mux_mode( port, extport, ( char* ) nxt_input_mux_mode( mode_inx ));
}
