
/*  nxt_analog_host.h was generated by yup.py (yupp) 0.7b7
    out of nxt_analog_host.yu-h at 2014-11-27 15:29
 *//**
 *  \file  nxt_analog_host.h (nxt_analog_host.yu-h)
 *  \brief  NXT Analog Host.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

#ifndef NXT_ANALOG_HOST_H
#define NXT_ANALOG_HOST_H

#ifdef  NXT_ANALOG_HOST_IMPLEMENT
#define NXT_ANALOG_HOST_EXT
#define NXT_ANALOG_HOST_EXT_INIT( dec, init ) \
	dec = init
#else
#define NXT_ANALOG_HOST_EXT extern
#define NXT_ANALOG_HOST_EXT_INIT( dec, init ) \
	extern dec
#endif

#ifndef COMMA
#define COMMA   ,
#endif

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 *  \defgroup ev3_host Host Drivers
 *  \brief Access to host drivers.
 *  \see http://www.ev3dev.org/docs/drivers/nxt-analog-host/
 *  \{
 */

#define NXT_ANALOG_HOST_DIR  "/sys/bus/legoev3/devices"  /**< Directory of nxt-analog-host drivers. */

/**
 *  \brief Get "device_type" attribute of the nxt-analog-host driver.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
NXT_ANALOG_HOST_EXT size_t get_nxt_analog_host_device_type( uint8_t port, uint8_t extport, char *buf, size_t sz );

/**
 *  \brief Get "port_name" attribute of the nxt-analog-host driver.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
NXT_ANALOG_HOST_EXT size_t get_nxt_analog_host_port_name( uint8_t port, uint8_t extport, char *buf, size_t sz );

/**
 *  \brief Set "set_sensor" attribute of the nxt-analog-host driver.
 *  \param port Port index.
 *  \param extport Extended port index.
 *  \param value Attribute value.

 *  \return Count of written bytes.
 */
NXT_ANALOG_HOST_EXT size_t set_nxt_analog_host_set_sensor( uint8_t port, uint8_t extport, char *value );

/** \} */

#ifdef __cplusplus
}
#endif

#endif

