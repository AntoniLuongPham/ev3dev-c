
/*  ev3_output.h was generated by yup.py (yupp) 0.7b7
    out of ev3_output.yu-h at 2014-11-26 12:57
 *//**
 *  \file  ev3_output.h (ev3_output.yu-h)
 *  \brief  EV3 Output Ports.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

#ifndef EV3_OUTPUT_H
#define EV3_OUTPUT_H

#ifdef  EV3_OUTPUT_IMPLEMENT
#define EV3_OUTPUT_EXT
#define EV3_OUTPUT_EXT_INIT( dec, init ) \
	dec = init
#else
#define EV3_OUTPUT_EXT extern
#define EV3_OUTPUT_EXT_INIT( dec, init ) \
	extern dec
#endif

#ifndef COMMA
#define COMMA   ,
#endif

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 *  \addtogroup ev3_port
 *  \{
 */

#define OUTPUT_DIR  "/sys/bus/legoev3/devices"  /**< Directory of output ports. */
#define OUTPUT__BASE_  128  /**< Base index of EV3 output ports. */

/**
 *  \brief Identifiers of EV3 output ports.
 */
enum {
	OUTPUT_A = OUTPUT__BASE_ + 0,
	OUTPUT_B = OUTPUT__BASE_ + 1,
	OUTPUT_C = OUTPUT__BASE_ + 2,
	OUTPUT_D = OUTPUT__BASE_ + 3,

};

#define OUTPUT__COUNT_  4  /**< Count of EV3 output ports. */

/**
 *  \brief Identifiers of output port modes.
 */
enum {
	OUTPUT_AUTO,
	OUTPUT_EV3_TACHO_MOTOR,
	OUTPUT_RCX_MOTOR,
	OUTPUT_RCX_LED,
	OUTPUT_RAW,

	OUTPUT_MODE__COUNT_  /**< Count of output port modes. */
};

/**
 *  \brief Get index of the EV3 output port from the port name.
 *  \param name Port name.
 *  \return EV3 output port index.
 */
EV3_OUTPUT_EXT uint8_t ev3_output_inx( const char *name );

/**
 *  \brief Get name of the specified EV3 output port.
 *  \param port Port index.
 *  \return Requested value.
 */
EV3_OUTPUT_EXT const char *ev3_output_name( uint8_t port );

/**
 *  \brief Get "mode" attribute of the output port.
 *  \param port Port index.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
EV3_OUTPUT_EXT size_t get_output_mode( uint8_t port, char *buf, size_t sz );

/**
 *  \brief Set "mode" attribute of the output port.
 *  \param port Port index.
 *  \param value Attribute value.

 *  \return Count of written bytes.
 */
EV3_OUTPUT_EXT size_t set_output_mode( uint8_t port, char *value );

/**
 *  \brief Get "modes" attribute of the output port.
 *  \param port Port index.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
EV3_OUTPUT_EXT size_t get_output_modes( uint8_t port, char *buf, size_t sz );

/**
 *  \brief Get "pin5_mv" attribute of the output port.
 *  \param port Port index.
 *  \param[out] buf Buffer for result.

 *  \return Count of read bytes.
 */
EV3_OUTPUT_EXT size_t get_output_pin5_mv( uint8_t port, int *buf );

/**
 *  \brief Get "state" attribute of the output port.
 *  \param port Port index.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
EV3_OUTPUT_EXT size_t get_output_state( uint8_t port, char *buf, size_t sz );

/**
 *  \brief Get name of the specified output mode.
 *  \param mode_inx The output mode.
 *  \return Requested value.
 */
EV3_OUTPUT_EXT const char *ev3_output_mode( uint8_t mode_inx );

/**
 *  \brief Get the mode index of the output port.
 *  \param port Port index.
 *  \return Index of the mode or OUTPUT_MODE__COUNT_ - error has occurred.
 */
EV3_OUTPUT_EXT uint8_t get_output_mode_inx( uint8_t port );

/**
 *  \brief Set the mode of the output by index.
 *  \param port Port index.
 *  \param mode_inx Index of the mode.
 *  \return Count of written bytes.
 */
EV3_OUTPUT_EXT size_t set_output_mode_inx( uint8_t port, uint8_t mode_inx );

/** \} */

#ifdef __cplusplus
}
#endif

#endif

