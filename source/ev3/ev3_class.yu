($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

($set PATH_PREF,,($unq CLASS_PATH)/($unq CLASS_FOLDER_PREF))
#define PATH_PREF_LEN  ($len PATH_PREF)
#define _ID_SPOT  "///"

($each-CLASS_ATTR \i.]
#define PATH_($upper ($i CLASS_ATTR_ID))  ($q PATH_PREF) _ID_SPOT ($i CLASS_ATTR_NAME)

[ )

($each-CLASS_AVEC \i.]
#define PATH_($upper ($i CLASS_AVEC_ID))  ($q PATH_PREF) _ID_SPOT ($i CLASS_AVEC_NAME)

[ )

($each-CLASS_ATTR \i.]

	($if ($le ($i CLASS_ATTR_WRITE) RW) ]
		size_t get_($CLASS_ID)_($i CLASS_ATTR_ID)( uint8_t sn, ($i CLASS_ATTR_TYPE) *buf($[, size_t sz] ? ($i CLASS_ATTR_ARRAY)) )
		{
			char s[] = PATH_($upper ($i CLASS_ATTR_ID));
			*modp_uitoa10( sn, s + PATH_PREF_LEN ) = '/';

			return ev3_read_($i CLASS_ATTR_TYPE)($[_array] ? ($i CLASS_ATTR_ARRAY))( s, buf($[, sz] ? ($i CLASS_ATTR_ARRAY)) );
		}
	[ )

	($if ($ge ($i CLASS_ATTR_WRITE) RW) ]
		size_t set_($CLASS_ID)_($i CLASS_ATTR_ID)( uint8_t sn, ($i CLASS_ATTR_TYPE) ($[*] ? ($i CLASS_ATTR_ARRAY))value($[, size_t sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) )
		{
			char s[] = PATH_($upper ($i CLASS_ATTR_ID));
			*modp_uitoa10( sn, s + PATH_PREF_LEN ) = '/';

			return ev3_write_($i CLASS_ATTR_TYPE)($[_array] ? ($i CLASS_ATTR_ARRAY))( s, value($[, sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) );
		}
	[ )

[ )

($each-CLASS_AVEC \i.]

	size_t get_($CLASS_ID)_($i CLASS_AVEC_ID)( uint8_t inx, uint8_t sn, ($i CLASS_AVEC_TYPE) *buf($[, size_t sz] ? ($i CLASS_AVEC_ARRAY)) )
	{
		char s[] = PATH_($upper ($i CLASS_AVEC_ID)) "    ";

		if ( inx > ($i CLASS_AVEC_SIZE) ) return ( 0 );

		*modp_uitoa10( sn, s + PATH_PREF_LEN ) = '/';
		modp_uitoa10( inx, s + PATH_PREF_LEN + 3 + ($len ($i CLASS_AVEC_ID)) );

		return ev3_read_($i CLASS_AVEC_TYPE)($[_array] ? ($i CLASS_AVEC_ARRAY))( s, buf($[, sz] ? ($i CLASS_AVEC_ARRAY)) );
	}

[ )

const char *ev3_($CLASS_ID)_type( uint8_t type_inx )
{
	switch ( type_inx ) {
	($each-CLASS_TYPE \i.]
	case ($upper ($i CLASS_TYPE_ID)):
		return ($i CLASS_TYPE_NAME);

	[ )
	}
	return ( STR_unknown_ );
}

uint8_t get_($CLASS_ID)_type_inx( uint8_t sn )
{
	char buf[ 64 ];

	if ( !get_($CLASS_ID)_($unq CLASS_TYPE_ATTR_NAME)( sn, buf, sizeof( buf ))) return ( ($upper CLASS_ID)_TYPE__NONE_ );

	($each-CLASS_TYPE \i.]
		if ( strcmp( buf, ($i CLASS_TYPE_NAME) ) == 0 ) return ($upper ($i CLASS_TYPE_ID));

	[ )
	return ( ($upper CLASS_ID)_TYPE__UNKNOWN_ );
}

uint8_t get_($CLASS_ID)_port_inx( uint8_t sn, uint8_t port_type_inx, uint8_t *extport )
{
	char buf[ 32 ];

	if ( !get_($CLASS_ID)_port_name( sn, buf, sizeof( buf ))) return ( EV3_PORT__NONE_ );

	return ( ev3_port_inx( port_type_inx, buf, extport ));
}

EV3_($upper CLASS_ID) *ev3_($CLASS_ID)_desc( uint8_t sn )
{
	if ( sn >= ($upper CLASS_ID)_DESC__LIMIT_) sn = ($upper CLASS_ID)_DESC__LIMIT_ - 1;
	return ( ev3_($CLASS_ID) + sn );
}

($each-CLASS_DESC \i.]

	($i CLASS_DESC_TYPE) ev3_($CLASS_ID)_desc_($i CLASS_DESC_ID)( uint8_t sn )
	{
		return ( ev3_($CLASS_ID)_desc( sn )->($i CLASS_DESC_ID) );
	}

[ )

bool ev3_search_($CLASS_ID)($[_type] ? ($eq CLASS_ID [port]))( uint8_t type_inx, uint8_t *sn, uint8_t from )
{
	uint8_t _sn = from;

	while ( _sn < ($upper CLASS_ID)_DESC__LIMIT_) {
		if ( ev3_($CLASS_ID)[ _sn ].type_inx == type_inx ) {
			*sn = _sn;
			return ( true );
		}
		++_sn;
	}
	*sn = ($upper CLASS_ID)__NONE_;
	return ( false );
}

bool ev3_search_($CLASS_ID)_plugged_in( uint8_t port, uint8_t extport, ($[uint8_t addr, ] ? ($CLASS_DESC_ADDR))uint8_t *sn, uint8_t from )
{
	uint8_t _sn = from;

	while ( _sn < ($upper CLASS_ID)_DESC__LIMIT_) {
		if ( ev3_($CLASS_ID)[ _sn ].port == port ) {
			($if ($CLASS_DESC_ADDR) ]
				if ( addr ) {
					if ( ev3_($CLASS_ID)[ _sn ].addr == addr ) {
						*sn = _sn;
						return ( true );
					}
				}
				else
			[ )
			if ( extport ) {
				if ( ev3_($CLASS_ID)[ _sn ].extport == extport ) {
						*sn = _sn;
						return ( true );
					}
			}
			else {
				*sn = _sn;
				return ( true );
			}
		}
		++_sn;
	}
	*sn = ($upper CLASS_ID)__NONE_;
	return ( false );
}

($CLASS_ATTR_INDEX \attr.]

	const char *ev3_($CLASS_ID)_($attr)( uint8_t ($attr)_inx )
	{
		switch ( ($attr)_inx ) {
		($each-CLASS_TYPE \i.]
			($($i ($$'CLASS_TYPE_($0)S' ($upper attr))) \ii.]
				case ($upper ($i CLASS_TYPE_ID))_($upper ($_VALUE_TO_ID ii)):
					return ($ii);

			[ )

		[ )
		}
		return ( STR_unknown_ );
	}

	($if ($le ($($index CLASS_ATTR_NAME ($q attr)) CLASS_ATTR_WRITE) RW) ]
		uint8_t get_($CLASS_ID)_($attr)_inx( uint8_t sn, uint8_t type_inx )
		{
			char buf[ 64 ];

			if ( !get_($CLASS_ID)_($attr)( sn, buf, sizeof( buf ))) return ( ($upper CLASS_ID)_($upper attr)__NONE_ );

			switch ( type_inx ) {
			($each-CLASS_TYPE \i.]

				case ($upper ($i CLASS_TYPE_ID)):
					($($i ($$'CLASS_TYPE_($0)S' ($upper attr))) \ii.]
						if ( strcmp( buf, ($ii) ) == 0 ) return ($upper ($i CLASS_TYPE_ID))_($upper ($_VALUE_TO_ID ii));

					[ )
					break;

			[ )
			}
			return ( ($upper CLASS_ID)_($upper attr)__UNKNOWN_ );
		}

	[ )
	size_t set_($CLASS_ID)_($attr)_inx( uint8_t sn, uint8_t ($attr)_inx )
	{
		return set_($CLASS_ID)_($attr)( sn, ( char* ) ev3_($CLASS_ID)_($attr)( ($attr)_inx ));
	}

[ )

int ev3_($CLASS_ID)_init( void )
{
	char list[ 256 ];
	char *p;
	uint32_t sn;
	uint8_t type_inx;
	int cnt = 0;

	memset( ev3_($CLASS_ID), 0, sizeof( ev3_($CLASS_ID) ));

	if ( !ev3_listdir( ($CLASS_PATH), list, sizeof( list ))) return ( -1 );

	p = strtok( list, " " );
	while ( p ) {
		if (( ev3_string_suffix( ($CLASS_FOLDER_PREF), &p, &sn ) == 1 ) && ( sn < ($upper CLASS_ID)_DESC__LIMIT_)) {
			($if ($CLASS_DESC_ADDR) ]
				get_($CLASS_ID)_address( sn, &ev3_($CLASS_ID)[ sn ].addr );
			[ )
			type_inx = get_($CLASS_ID)_type_inx( sn );
			ev3_($CLASS_ID)[ sn ].type_inx = type_inx;
			ev3_($CLASS_ID)[ sn ].port = get_($CLASS_ID)_port_inx( sn, ($[type_inx] ? ($eq CLASS_ID [port]) | [PORT_TYPE__NONE_]), &ev3_($CLASS_ID)[ sn ].extport );
			++cnt;
		}
		p = strtok( NULL, " " );
	}
	return ( cnt );
}
