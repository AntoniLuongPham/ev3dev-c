($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

($set PATH_PREF ($join (($unq CLASS_PATH) ($unq CLASS_FOLDER_PREF)) [/]))
#define PATH_PREF_LEN  ($len PATH_PREF)
#define _ID_SPOT  "///"

($each-CLASS_ATTR \i.]
#define PATH_($upper ($i CLASS_ATTR_ID))  ($q PATH_PREF) _ID_SPOT ($i CLASS_ATTR_NAME)

[ )

($each-CLASS_AVEC \i.]
#define PATH_($upper ($i CLASS_AVEC_ID))  ($q PATH_PREF) _ID_SPOT ($i CLASS_AVEC_NAME)

[ )

($each-CLASS_ATTR \i.]

	($if ($le ($i CLASS_ATTR_WRITE) RW) ]
		size_t get_($CLASS_ID)_($i CLASS_ATTR_ID)( uint8_t id, ($i CLASS_ATTR_TYPE) *buf($[, size_t sz] ? ($i CLASS_ATTR_ARRAY)) )
		{
			char s[] = PATH_($upper ($i CLASS_ATTR_ID));
			*modp_uitoa10( id, s + PATH_PREF_LEN ) = '/';

			return ev3_read_($i CLASS_ATTR_TYPE)($[_array] ? ($i CLASS_ATTR_ARRAY))( s, buf($[, sz] ? ($i CLASS_ATTR_ARRAY)) );
		}
	[ )

	($if ($ge ($i CLASS_ATTR_WRITE) RW) ]
		size_t set_($CLASS_ID)_($i CLASS_ATTR_ID)( uint8_t id, ($i CLASS_ATTR_TYPE) ($[*] ? ($i CLASS_ATTR_ARRAY))value($[, size_t sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) )
		{
			char s[] = PATH_($upper ($i CLASS_ATTR_ID));
			*modp_uitoa10( id, s + PATH_PREF_LEN ) = '/';

			return ev3_write_($i CLASS_ATTR_TYPE)($[_array] ? ($i CLASS_ATTR_ARRAY))( s, value($[, sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) );
		}
	[ )

[ )

($each-CLASS_AVEC \i.]

	size_t get_($CLASS_ID)_($i CLASS_AVEC_ID)( uint8_t inx, uint8_t id, ($i CLASS_AVEC_TYPE) *buf($[, size_t sz] ? ($i CLASS_AVEC_ARRAY)) )
	{
		char s[] = PATH_($upper ($i CLASS_AVEC_ID)) "    ";

		if ( inx > ($i CLASS_AVEC_SIZE) ) return ( 0 );

		*modp_uitoa10( id, s + PATH_PREF_LEN ) = '/';
		modp_uitoa10( inx, s + PATH_PREF_LEN + 3 + ($len ($i CLASS_AVEC_ID)) );

		return ev3_read_($i CLASS_AVEC_TYPE)($[_array] ? ($i CLASS_AVEC_ARRAY))( s, buf($[, sz] ? ($i CLASS_AVEC_ARRAY)) );
	}

[ )

char *ev3_($CLASS_ID)_type( uint8_t type_id )
{
	switch ( type_id ) {
	($each-CLASS_TYPE \i.]
	case ($i CLASS_TYPE_ID):
		return ($upper ($i CLASS_TYPE_NAME));

	[ )
	}
	return "";
}

int ev3_($CLASS_ID)_port( uint8_t type_id )
{
	int i;

	for ( i = 0; i < ($CLASS_PORT_ID)__COUNT_; i++ ) {
		if ( ev3_($CLASS_ID)[ i ].connected && ( ev3_($CLASS_ID)[ i ].type_id == type_id )) return ( i );
	}
	return ( EV3_NONE );
}

EV3_($upper CLASS_ID) *ev3_get_($CLASS_ID)( uint8_t port )
{
	return ( ev3_($CLASS_ID) + (( port < ($CLASS_PORT_ID)__COUNT_ ) ? port : 0 ));
}

bool ev3_get_($CLASS_ID)_connected( uint8_t port )
{
	return ( ev3_($CLASS_ID)[( port < ($CLASS_PORT_ID)__COUNT_ ) ? port : 0 ].connected );
}

uint32_t ev3_get_($CLASS_ID)_id( uint8_t port )
{
	return ( ev3_($CLASS_ID)[( port < ($CLASS_PORT_ID)__COUNT_ ) ? port : 0 ].id );
}

uint32_t ev3_get_($CLASS_ID)_type_id( uint8_t port )
{
	return ( ev3_($CLASS_ID)[( port < ($CLASS_PORT_ID)__COUNT_ ) ? port : 0 ].type_id );
}

static bool get_str_suffix( const char *prefix, char *s, uint32_t *buf )
{
	char *end;
	uint32_t l = strlen( prefix );

	if ( memcmp( s, prefix, l )) return ( false );
	*buf = strtoul( s + l, &end, 0 );
	if ( *end ) return ( false );

	return ( true );
}
