($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

($import "app.yu")
($TITLE,,EV3 LEDs.)

($import stdlib)
($import h)

($h-begin-named)

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

($extern-c-begin)

/**
 *  \defgroup ev3_led LEDs
 *  \brief Access to EV3 LEDs.
 *  \{
 */

($import "ev3_led-dict.yu")

/**
 *  \brief Identifiers of LEDs.
 */
enum {
	($LED_ID \i.]
		($upper i),

	[ )
	LED__COUNT_  /**< Count of EV3 LEDs. */
};

/**
 *  \brief Triggers identifiers of LEDs.
 */
enum {
	($LED_TRIGGER_ID \i.]
		TRIGGER_($upper i),

	[ )
	TRIGGER__COUNT_  /**< Count of EV3 triggers. */
};

($define,,LED_ATTR__COUNT_,,($len LED_ATTR_ID))

($each-LED_ATTR \i.]
	($if ($le ($i LED_ATTR_WRITE) RW) ]
		/**
		 *  \brief Get ($i LED_ATTR_NAME) attribute of the LED.
		 *  \param inx Index of the LED.
		 *  \param[out] buf Buffer for result.
		 ($[*  \param sz Buffer size.] ? ($i LED_ATTR_ARRAY))
		 *  \return Count of read bytes.
		 */
		($h-extern) size_t get_led_($i LED_ATTR_ID)( uint8_t inx, ($i LED_ATTR_TYPE) *buf($[, size_t sz] ? ($i LED_ATTR_ARRAY)) );

	[ )
	($if ($ge ($i LED_ATTR_WRITE) RW) ]
		/**
		 *  \brief Set ($i LED_ATTR_NAME) attribute of the LED.
		 *  \param inx Index of the LED.
		 *  \param value Attribute value.
		 *  \return Count of written bytes.
		 */
		($h-extern) size_t set_led_($i LED_ATTR_ID)( uint8_t inx, ($i LED_ATTR_TYPE) ($[*] ? ($i LED_ATTR_ARRAY))value );

	[ )

[ )

/**
 *  \brief Get the trigger index of the LED.
 *  \param inx Index of the LED.
 *  \return Index of trigger or TRIGGER__COUNT_ - error has occurred.
 */
($h-extern) uint8_t get_led_trigger_inx( uint8_t inx );

/**
 *  \brief Set the trigger of the LED by index.
 *  \param inx Index of the LED.
 *  \param trigger_inx Index of the trigger.
 *  \return Count of written bytes.
 */
($h-extern) size_t set_led_trigger_inx( uint8_t inx, uint8_t trigger_inx );

/**
 *  \brief Get name of the specified LED trigger.
 *  \param trigger_inx Index of the trigger.
 *  \return Requested value.
 */
($h-extern) const char *ev3_led_trigger( uint8_t trigger_inx );

/** \} */

($extern-c-end)

($h-end)
